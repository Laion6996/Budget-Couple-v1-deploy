import React from 'react';

/**
 * Hook qui pr√©charge intelligemment les composants probables apr√®s que l'application soit idle
 * 
 * Crit√®res de pr√©chargement :
 * - Connexion rapide (4g ou inconnue)
 * - Thread principal libre (requestIdleCallback)
 * - Composants les plus susceptibles d'√™tre utilis√©s
 * 
 * Avantages :
 * - Navigation plus fluide
 * - R√©duction des "Unused JS" dans Lighthouse
 * - Pas d'impact sur FCP/LCP
 */
export function usePrefetchIdle() {
  React.useEffect(() => {
    // V√©rifier la qualit√© de la connexion
    const net = (navigator as any).connection?.effectiveType;
    const fast = !net || net === '4g';
    
    // Si la connexion est lente, ne pas pr√©charger
    if (!fast) {
      console.log('üö´ Prefetch d√©sactiv√©: connexion lente (', net, ')');
      return;
    }

    // Fonction de pr√©chargement des composants probables
    const prefetchComponents = async () => {
      try {
        console.log('üöÄ D√©but du prefetch intelligent...');
        
        // Pr√©charger les pages les plus probables
        const pagePromises = [
          import('../pages/Parametres'),    // Page de configuration (tr√®s utilis√©e)
          import('../pages/Perso'),         // Budgets personnels (utilis√©e)
          import('../pages/Objectifs'),     // Objectifs d'√©pargne (utilis√©e)
          import('../pages/Historique'),    // Historique (utilis√©e)
          import('../pages/DemoDonut')      // D√©mo (moins utilis√©e mais lourde)
        ];

        // Pr√©charger les composants lourds
        const componentPromises = [
          import('../components/DonutChart'),      // Graphiques (tr√®s lourd)
          import('../components/LazyDonutChart'),  // Wrapper lazy
          import('../charts/DonutAnalysis')        // Analyse avanc√©e
        ];

        // Pr√©charger les hooks et stores
        const hookPromises = [
          import('../hooks/useChargesFixes'),      // Gestion des charges
          import('../hooks/useBudgetsPerso'),      // Budgets personnels
          import('../hooks/useObjectifs'),         // Objectifs
          import('../stores/useAppStore')          // Store principal
        ];

        // Lancer tous les pr√©chargements en parall√®le
        const allPromises = [
          ...pagePromises,
          ...componentPromises,
          ...hookPromises
        ];

        // Attendre que tous les pr√©chargements soient termin√©s
        await Promise.allSettled(allPromises);
        
        console.log('‚úÖ Prefetch termin√© avec succ√®s');
        
        // Marquer les composants comme pr√©charg√©s dans le cache
        markComponentsAsPrefetched();
        
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur lors du prefetch:', error);
      }
    };

    // Marquer les composants comme pr√©charg√©s pour √©viter les rechargements
    const markComponentsAsPrefetched = () => {
      // Cr√©er un marqueur global pour indiquer que le prefetch est termin√©
      (window as any).__PREFETCH_COMPLETED__ = true;
      
      // Optionnel: stocker dans sessionStorage pour la session
      try {
        sessionStorage.setItem('prefetch_completed', 'true');
        sessionStorage.setItem('prefetch_timestamp', Date.now().toString());
      } catch (e) {
        // Ignorer les erreurs de sessionStorage
      }
    };

    // V√©rifier si le prefetch a d√©j√† √©t√© effectu√©
    const alreadyPrefetched = (window as any).__PREFETCH_COMPLETED__ || 
                              sessionStorage.getItem('prefetch_completed');
    
    if (alreadyPrefetched) {
      console.log('‚ÑπÔ∏è Prefetch d√©j√† effectu√©, ignor√©');
      return;
    }

    // D√©lai avant de commencer le prefetch (laisser l'app se stabiliser)
    const prefetchDelay = 1000; // 1 seconde
    
    // Utiliser requestIdleCallback si disponible, sinon fallback sur setTimeout
    let prefetchId: number | NodeJS.Timeout;
    
    if (typeof window !== 'undefined' && 'requestIdleCallback' in window) {
      // Utiliser requestIdleCallback pour ne pas bloquer le thread principal
      prefetchId = (window as any).requestIdleCallback(
        prefetchComponents,
        { 
          timeout: 2000, // Timeout de 2 secondes maximum
          deadline: 50    // D√©lai maximum de 50ms par chunk
        }
      );
      
      console.log('üéØ Prefetch programm√© avec requestIdleCallback');
    } else {
      // Fallback sur setTimeout avec un d√©lai plus long
      prefetchId = setTimeout(prefetchComponents, prefetchDelay + 1200);
      console.log('‚è∞ Prefetch programm√© avec setTimeout (fallback)');
    }

    // Nettoyage lors du d√©montage
    return () => {
      if (typeof window !== 'undefined' && 'cancelIdleCallback' in window) {
        (window as any).cancelIdleCallback(prefetchId as number);
      } else {
        clearTimeout(prefetchId as NodeJS.Timeout);
      }
      console.log('üßπ Prefetch annul√©');
    };
  }, []); // Ex√©cuter une seule fois au montage

  // Retourner des informations sur l'√©tat du prefetch
  return {
    isPrefetching: false, // Pour l'instant, on ne track pas l'√©tat
    prefetchCompleted: (window as any).__PREFETCH_COMPLETED__ || false
  };
}
